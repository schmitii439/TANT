Basic Text Generation with Claude 3.7 Sonnet
To generate text using Claude, use the puter.ai.chat() function with your preferred model. Here's a full code example using Claude 3.7 Sonnet:

<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        puter.ai.chat("Explain quantum computing in simple terms", {model: 'claude-3-7-sonnet'})
            .then(response => {
                puter.print(response.message.content[0].text);
            });
    </script>
</body>
</html>
Example 2Streaming Responses for Longer Queries
For longer responses, use streaming to get results in real-time:

async function streamClaudeResponse(model = 'claude-3-7-sonnet') {
    const response = await puter.ai.chat(
        "Write a detailed essay on the impact of artificial intelligence on society", 
        {model: model, stream: true}
    );
    
    for await (const part of response) {
        puter.print(part?.text);
    }
}

// Use Claude 3.7 Sonnet (default)
streamClaudeResponse();

// Or specify Claude 3.5 Sonnet
// streamClaudeResponse('claude-3-5-sonnet');
Here's the full code example with streaming:

<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        (async () => {
            const response = await puter.ai.chat(
                "Write a detailed essay on the impact of artificial intelligence on society", 
                {model: 'claude-3-7-sonnet', stream: true}
            );
            
            for await (const part of response) {
                puter.print(part?.text);
            }
        })();
    </script>
</body>
</html>
Example 3Using different Claude models
You can specify different Claude models using the model parameter, for example claude-3-5-sonnet or claude-3-7-sonnet:

// Using claude-3-5-sonnet model
puter.ai.chat(
    "Write a short poem about coding",
    { model: "claude-3-5-sonnet" }
).then(response => {
    puter.print(response);
});

// Using claude-3-7-sonnet model
puter.ai.chat(
    "Write a short poem about coding",
    { model: "claude-3-7-sonnet" }
).then(response => {
    puter.print(response);
});
Full code example:

<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        // Using claude-3-5-sonnet model
        puter.ai.chat(
            "Write a short poem about coding",
            { model: "claude-3-5-sonnet" }
        ).then(response => {
            puter.print("<h2>Using claude-3-5-sonnet model</h2>");
            puter.print(response);
        });

        // Using claude-3-7-sonnet model
        puter.ai.chat(
            "Write a short poem about coding",
            { model: "claude-3-7-sonnet" }
        ).then(response => {
            puter.print("<h2>Using claude-3-7-sonnet model</h2>");
            puter.print(response);
        });
    </script>
</body>
</html>
Choosing Between Claude 3.5 Sonnet and Claude 3.7 Sonnet
Claude 3.5 Sonnet: A good general-purpose model for most applications.
Claude 3.7 Sonnet: The more advanced model, with better performance for complex reasoning tasks, agentic coding, and detailed content generation.
Both models are available without usage limits through Puter.js, so you can select the one that best fits your specific needs.

That's it! You now have free, unlimited access to Claude capabilities using Puter.js. This allows you to leverage Claude's advanced language understanding and generation abilities without worrying about API keys or usage limits.